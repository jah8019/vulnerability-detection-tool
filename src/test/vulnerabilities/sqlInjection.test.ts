import { VulnerabilityReport } from "../../contracts/vulnerabilityReport";
import { VulnerabilityType } from "../../interfaces/vulnerability";
import { SQLInjection } from "../../vulnerabilities/SQLInjection";

describe('SQLInjectionVulnerability Tests', () => {
  let vulnerability: SQLInjection;

  beforeEach(() => {
    vulnerability = new SQLInjection('../../config/vulnerabilityConfig.json');
  });

  test('should detect SQL injection vulnerability with SqlCommand and user input', () => {
    const code = `
      public void ExecuteQuery(string userInput) {
        string query = "SELECT * FROM Users WHERE Name = '" + userInput + "'";
        SqlCommand command = new SqlCommand(query);
      }
    `;
    const filePath = 'testFile.cs';
    const results: VulnerabilityReport[] = vulnerability.detect(code, filePath);
    expect(results.length).toBe(1);
    const result = results[0];
    expect(result).not.toBeNull();
    expect(result.type).toBe(VulnerabilityType.SQLInjection);
    expect(result.description).toBe('Possible vulnerability detected: Possible SQL Injection vulnerability detected.');
    expect(result.filePath).toBe(filePath);
    expect(result.lineNumber).toBe(3);  
    expect(result.details).toBe('The expression at line 3 in file testFile.cs may cause a SQLInjection vulnerability.');
  });

  test('should not detect SQL injection vulnerability in safe code', () => {
    const code = `
      public void ExecuteQuery(string userInput) {
        SqlCommand command = new SqlCommand("SELECT * FROM Users WHERE Name = @name");
        command.Parameters.AddWithValue("@name", userInput);
      }
    `;
    const filePath = 'testFile.cs';
    const results: VulnerabilityReport[] = vulnerability.detect(code, filePath);
    expect(results.length).toBe(0);
  });

  test('should detect SQL injection vulnerability in a complex code block', () => {
    const code = `
      public void ExecuteQuery(string userInput) {
        if (!string.IsNullOrEmpty(userInput)) {
          string query = "SELECT * FROM Users WHERE Name = '" + userInput + "'";
          SqlCommand command = new SqlCommand(query);
        }
      }
    `;
    const filePath = 'testFile.cs';
    const results: VulnerabilityReport[] = vulnerability.detect(code, filePath);
    expect(results.length).toBe(1);
    const result = results[0];
    expect(result).not.toBeNull();
    expect(result.type).toBe(VulnerabilityType.SQLInjection);
    expect(result.description).toBe('Possible vulnerability detected: Possible SQL Injection vulnerability detected.');
    expect(result.filePath).toBe(filePath);
    expect(result.lineNumber).toBe(4);  
    expect(result.details).toBe('The expression at line 4 in file testFile.cs may cause a SQLInjection vulnerability.');
  });

  test('should detect multiple SQL injection vulnerabilities in the same file', () => {
    const code = `
      public void ExecuteQuery(string userInput) {
        string query = "SELECT * FROM Users WHERE Name = '" + userInput + "'";
        SqlCommand command = new SqlCommand(query);
      }

      public void ExecuteAnotherQuery(string userInput) {
        string query = "SELECT * FROM Orders WHERE OrderId = '" + userInput + "'";
        SqlCommand command = new SqlCommand(query);
      }
    `;
    const filePath = 'testFile.cs';
    const results: VulnerabilityReport[] = vulnerability.detect(code, filePath);
    expect(results.length).toBe(2);
    const result1 = results[0];
    expect(result1).not.toBeNull();
    expect(result1.type).toBe(VulnerabilityType.SQLInjection);
    expect(result1.description).toBe('Possible vulnerability detected: Possible SQL Injection vulnerability detected.');
    expect(result1.filePath).toBe(filePath);
    expect(result1.lineNumber).toBe(3);  
    expect(result1.details).toBe('The expression at line 3 in file testFile.cs may cause a SQLInjection vulnerability.');

    const result2 = results[1];
    expect(result2).not.toBeNull();
    expect(result2.type).toBe(VulnerabilityType.SQLInjection);
    expect(result2.description).toBe('Possible vulnerability detected: Possible SQL Injection vulnerability detected.');
    expect(result2.filePath).toBe(filePath);
    expect(result2.lineNumber).toBe(8);  
    expect(result2.details).toBe('The expression at line 8 in file testFile.cs may cause a SQLInjection vulnerability.');
  });

  test('should not detect SQL injection vulnerability when parameters are used safely', () => {
    const code = `
      public void ExecuteQuery(string userInput) {
        SqlCommand command = new SqlCommand("SELECT * FROM Users WHERE Name = @name");
        command.Parameters.AddWithValue("@name", userInput);
      }
    `;
    const filePath = 'testFile.cs';
    const results: VulnerabilityReport[] = vulnerability.detect(code, filePath);
    expect(results.length).toBe(0);
  });

  // Weitere Tests
  test('should detect SQL injection vulnerability with SqlCommand in UPDATE statement', () => {
    const code = `
      public void UpdateUser(string userInput) {
        string query = "UPDATE Users SET Name = '" + userInput + "' WHERE UserId = 1";
        SqlCommand command = new SqlCommand(query);
      }
    `;
    const filePath = 'testFile.cs';
    const results: VulnerabilityReport[] = vulnerability.detect(code, filePath);
    expect(results.length).toBe(1);
    const result = results[0];
    expect(result).not.toBeNull();
    expect(result.type).toBe(VulnerabilityType.SQLInjection);
    expect(result.description).toBe('Possible vulnerability detected: Possible SQL Injection vulnerability detected.');
    expect(result.filePath).toBe(filePath);
    expect(result.lineNumber).toBe(3);
    expect(result.details).toBe('The expression at line 3 in file testFile.cs may cause a SQLInjection vulnerability.');
  });

  test('should detect SQL injection vulnerability with SqlCommand in DELETE statement', () => {
    const code = `
      public void DeleteUser(string userInput) {
        string query = "DELETE FROM Users WHERE Name = '" + userInput + "'";
        SqlCommand command = new SqlCommand(query);
      }
    `;
    const filePath = 'testFile.cs';
    const results: VulnerabilityReport[] = vulnerability.detect(code, filePath);
    expect(results.length).toBe(1);
    const result = results[0];
    expect(result).not.toBeNull();
    expect(result.type).toBe(VulnerabilityType.SQLInjection);
    expect(result.description).toBe('Possible vulnerability detected: Possible SQL Injection vulnerability detected.');
    expect(result.filePath).toBe(filePath);
    expect(result.lineNumber).toBe(3);
    expect(result.details).toBe('The expression at line 3 in file testFile.cs may cause a SQLInjection vulnerability.');
  });

  test('should detect SQL injection vulnerability in nested condition', () => {
    const code = `
      public void ExecuteQuery(string userInput) {
        if (!string.IsNullOrEmpty(userInput)) {
          if (userInput.Contains("admin")) {
            string query = "SELECT * FROM Users WHERE Name = '" + userInput + "'";
            SqlCommand command = new SqlCommand(query);
          }
        }
      }
    `;
    const filePath = 'testFile.cs';
    const results: VulnerabilityReport[] = vulnerability.detect(code, filePath);
    expect(results.length).toBe(1);
    const result = results[0];
    expect(result).not.toBeNull();
    expect(result.type).toBe(VulnerabilityType.SQLInjection);
    expect(result.description).toBe('Possible vulnerability detected: Possible SQL Injection vulnerability detected.');
    expect(result.filePath).toBe(filePath);
    expect(result.lineNumber).toBe(5); // Anpassung fÃ¼r die verschachtelte Bedingung
    expect(result.details).toBe('The expression at line 5 in file testFile.cs may cause a SQLInjection vulnerability.');
  });

  test('should not detect false positive for safe parameterized query in complex code', () => {
    const code = `
      public void ExecuteQuery(string userInput) {
        if (!string.IsNullOrEmpty(userInput)) {
          SqlCommand command = new SqlCommand("SELECT * FROM Users WHERE Name = @name");
          command.Parameters.AddWithValue("@name", userInput);
        }
      }
    `;
    const filePath = 'testFile.cs';
    const results: VulnerabilityReport[] = vulnerability.detect(code, filePath);
    expect(results.length).toBe(0);
  });
});
