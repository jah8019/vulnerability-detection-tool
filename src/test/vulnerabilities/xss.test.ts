import { VulnerabilityReport } from "../../contracts/vulnerabilityReport";
import { VulnerabilityType } from "../../interfaces/vulnerability";
import { XSS } from "../../vulnerabilities/XSS";

describe('XSSVulnerability Tests', () => {
  let vulnerability: XSS;

  beforeEach(() => {
    vulnerability = new XSS('../../config/vulnerabilityConfig.json');
  });

  test('should detect XSS vulnerability with Response.Write and user input', () => {
    const code = `
      public void DisplayInput(string userInput) {
        Response.Write(userInput);
      }
    `;
    const filePath = 'testFile.cs';
    const results: VulnerabilityReport[] = vulnerability.detect(code, filePath);
    expect(results.length).toBe(1);
    const result = results[0];
    expect(result).not.toBeNull();
    expect(result.type).toBe(VulnerabilityType.XSS);
    expect(result.description).toBe('Possible vulnerability detected: Possible XSS vulnerability detected.');
    expect(result.filePath).toBe(filePath);
    expect(result.lineNumber).toBe(3);  // Zeilennummer von Response.Write
    expect(result.details).toBe('The expression at line 3 in file testFile.cs may cause a XSS vulnerability.');
  });

  test('should not detect XSS vulnerability in safe code', () => {
    const code = `
      public void DisplayInput() {
        Response.Write("Hello, World!");
      }
    `;
    const filePath = 'testFile.cs';
    const results: VulnerabilityReport[] = vulnerability.detect(code, filePath);
    expect(results.length).toBe(0);
  });

  test('should detect XSS vulnerability in a complex code block', () => {
    const code = `
      public void DisplayInput(string userInput) {
        if (userInput != null) {
          Response.Write(userInput);
        }
      }
    `;
    const filePath = 'testFile.cs';
    const results: VulnerabilityReport[] = vulnerability.detect(code, filePath);
    expect(results.length).toBe(1);
    const result = results[0];
    expect(result).not.toBeNull();
    expect(result.type).toBe(VulnerabilityType.XSS);
    expect(result.description).toBe('Possible vulnerability detected: Possible XSS vulnerability detected.');
    expect(result.filePath).toBe(filePath);
    expect(result.lineNumber).toBe(4);  // Zeilennummer von Response.Write
    expect(result.details).toBe('The expression at line 4 in file testFile.cs may cause a XSS vulnerability.');
  });

  test('should detect multiple XSS vulnerabilities in the same file', () => {
    const code = `
      public void DisplayInput(string userInput) {
        Response.Write(userInput);
      }

      public void DisplayInputAgain(string userInput) {
        Response.Write(userInput);
      }
    `;
    const filePath = 'testFile.cs';
    const results: VulnerabilityReport[] = vulnerability.detect(code, filePath);
    expect(results.length).toBe(2);
    const result1 = results[0];
    expect(result1).not.toBeNull();
    expect(result1.type).toBe(VulnerabilityType.XSS);
    expect(result1.description).toBe('Possible vulnerability detected: Possible XSS vulnerability detected.');
    expect(result1.filePath).toBe(filePath);
    expect(result1.lineNumber).toBe(3);  // Zeilennummer von erstem Response.Write
    expect(result1.details).toBe('The expression at line 3 in file testFile.cs may cause a XSS vulnerability.');

    const result2 = results[1];
    expect(result2).not.toBeNull();
    expect(result2.type).toBe(VulnerabilityType.XSS);
    expect(result2.description).toBe('Possible vulnerability detected: Possible XSS vulnerability detected.');
    expect(result2.filePath).toBe(filePath);
    expect(result2.lineNumber).toBe(7);  // Zeilennummer von zweitem Response.Write
    expect(result2.details).toBe('The expression at line 7 in file testFile.cs may cause a XSS vulnerability.');
  });

  test('should not detect XSS vulnerability when Response.Write is used safely', () => {
    const code = `
      public void DisplayInput(string userInput) {
        string safeInput = HttpUtility.HtmlEncode(userInput);
        Response.Write(safeInput);
      }
    `;
    const filePath = 'testFile.cs';
    const results: VulnerabilityReport[] = vulnerability.detect(code, filePath);
    expect(results.length).toBe(0);
  });
});




// import { VulnerabilityReport } from "../../contracts/vulnerabilityReport";
// import { VulnerabilityType } from "../../interfaces/vulnerability";
// import { XSS } from "../../vulnerabilities/XSS";


// describe('XSSVulnerability Tests', () => {
//   let vulnerability: XSS;

//   beforeEach(() => {
//     vulnerability = new XSS('../../config/vulnerabilityConfig.json');
//   });

//   test('should detect XSS vulnerability with Response.Write and user input', () => {
//     const code = `
//       public void DisplayInput(string userInput) {
//         Response.Write(userInput);
//       }
//     `;
//     const filePath = 'testFile.cs';
//     const results: VulnerabilityReport[] = vulnerability.detect(code, filePath);
//     expect(results.length).toBe(1);
//     const result = results[0];
//     expect(result).not.toBeNull();
//     expect(result.type).toBe(VulnerabilityType.XSS);
//     expect(result.description).toBe('Possible vulnerability detected: Possible vulnerability detected: Possible XSS vulnerability detected.');
//     expect(result.filePath).toBe(filePath);
//     expect(result.lineNumber).toBe(3);  // Zeilennummer von Response.Write
//     expect(result.details).toBe('The expression at line 3 in file testFile.cs may cause a XSS vulnerability.');
//   });

//   test('should not detect XSS vulnerability in safe code', () => {
//     const code = `
//       public void DisplayInput() {
//         Response.Write("Hello, World!");
//       }
//     `;
//     const filePath = 'testFile.cs';
//     const results: VulnerabilityReport[] = vulnerability.detect(code, filePath);
//     expect(results.length).toBe(0);
//   });

//   test('should detect XSS vulnerability in a complex code block', () => {
//     const code = `
//       public void DisplayInput(string userInput) {
//         if (userInput != null) {
//           Response.Write(userInput);
//         }
//       }
//     `;
//     const filePath = 'testFile.cs';
//     const results: VulnerabilityReport[] = vulnerability.detect(code, filePath);
//     expect(results.length).toBe(1);
//     const result = results[0];
//     expect(result).not.toBeNull();
//     expect(result.type).toBe(VulnerabilityType.XSS);
//     expect(result.description).toBe('Possible vulnerability detected: Possible vulnerability detected: Possible XSS vulnerability detected.');
//     expect(result.filePath).toBe(filePath);
//     expect(result.lineNumber).toBe(4);  // Zeilennummer von Response.Write
//     expect(result.details).toBe('The expression at line 4 in file testFile.cs may cause a XSS vulnerability.');
//   });

//   test('should detect multiple XSS vulnerabilities in the same file', () => {
//     const code = `
//       public void DisplayInput(string userInput) {
//         Response.Write(userInput);
//       }

//       public void DisplayInputAgain(string userInput) {
//         Response.Write(userInput);
//       }
//     `;
//     const filePath = 'testFile.cs';
//     const results: VulnerabilityReport[] = vulnerability.detect(code, filePath);
//     expect(results.length).toBe(2);
//     const result1 = results[0];
//     expect(result1).not.toBeNull();
//     expect(result1.type).toBe(VulnerabilityType.XSS);
//     expect(result1.description).toBe('Possible vulnerability detected: Possible vulnerability detected: Possible XSS vulnerability detected.');
//     expect(result1.filePath).toBe(filePath);
//     expect(result1.lineNumber).toBe(3);  // Zeilennummer von erstem Response.Write
//     expect(result1.details).toBe('The expression at line 3 in file testFile.cs may cause a XSS vulnerability.');

//     const result2 = results[1];
//     expect(result2).not.toBeNull();
//     expect(result2.type).toBe(VulnerabilityType.XSS);
//     expect(result2.description).toBe('Possible vulnerability detected: Possible vulnerability detected: Possible XSS vulnerability detected.');
//     expect(result2.filePath).toBe(filePath);
//     expect(result2.lineNumber).toBe(7);  // Zeilennummer von zweitem Response.Write
//     expect(result2.details).toBe('The expression at line 7 in file testFile.cs may cause a XSS vulnerability.');
//   });

//   test('should not detect XSS vulnerability when Response.Write is used safely', () => {
//     const code = `
//       public void DisplayInput() {
//         string safeInput = HttpUtility.HtmlEncode(userInput);
//         Response.Write(safeInput);
//       }
//     `;
//     const filePath = 'testFile.cs';
//     const results: VulnerabilityReport[] = vulnerability.detect(code, filePath);
//     expect(results.length).toBe(0);
//   });
// });
