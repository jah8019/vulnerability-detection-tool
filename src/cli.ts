import * as fs from 'fs';
import * as path from 'path';
import { VulnerabilityScanner } from './vulnerabilityScanner';
import { VulnerabilityReport } from './contracts/vulnerabilityReport';

const configPath = path.join(__dirname, 'config/vulnerabilityConfig.json');
const scanner = new VulnerabilityScanner(configPath);

const targetPath = process.argv[2];
if (!targetPath) {
  console.error('Please provide a file or directory path to scan.');
  process.exit(1);
}

let allReports: VulnerabilityReport[] = [];

fs.stat(targetPath, (err, stats) => {
  if (err) {
    console.error(`Error accessing path ${targetPath}:`, err);
    process.exit(1);
  }

  if (stats.isDirectory()) {
    scanDirectory(targetPath, summarizeReports);
  } else if (stats.isFile()) {
    scanFile(targetPath, summarizeReports);
  } else {
    console.error('The provided path is neither a file nor a directory.');
    process.exit(1);
  }
});

/**
 * Recursively scan a directory for vulnerabilities
 * @param dirPath - The directory path to scan
 * @param callback - The callback function to call after scanning
 */
function scanDirectory(dirPath: string, callback: () => void): void {
  fs.readdir(dirPath, (err, files) => {
    if (err) {
      console.error(`Error reading directory ${dirPath}:`, err);
      process.exit(1);
    }

    let pending = files.length;
    if (!pending) return callback();

    files.forEach(file => {
      const fullPath = path.join(dirPath, file);
      fs.stat(fullPath, (err, stats) => {
        if (err) {
          console.error(`Error accessing file ${fullPath}:`, err);
          if (!--pending) callback();
          return;
        }

        if (stats.isDirectory()) {
          scanDirectory(fullPath, () => {
            if (!--pending) callback();
          });
        } else if (stats.isFile()) {
          scanFile(fullPath, () => {
            if (!--pending) callback();
          });
        } else {
          if (!--pending) callback();
        }
      });
    });
  });
}

/**
 * Scan a single file for vulnerabilities
 * @param filePath - The file path to scan
 * @param callback - The callback function to call after scanning
 */
function scanFile(filePath: string, callback: () => void): void {
  fs.readFile(filePath, 'utf8', (err, data) => {
    if (err) {
      console.error(`Error reading file ${filePath}:`, err);
      callback();
      return;
    }

    const reports: VulnerabilityReport[] = scanner.scan(data, filePath);
    if (reports.length > 0) {
      allReports = allReports.concat(reports);
    }
    callback();
  });
}

/**
 * Summarize and print all collected vulnerability reports
 */
function summarizeReports(): void {
  if (allReports.length > 0) {
    console.log(`Found ${allReports.length} vulnerabilities:`);
    allReports.forEach(report => {
      console.log(`${report.filePath}:${report.lineNumber} - ${report.description}`);
    });
  } else {
    console.log('No vulnerabilities found.');
  }
}
