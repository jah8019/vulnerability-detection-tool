import { VulnerabilityReport } from '../contracts/vulnerabilityReport';
import { VulnerabilityType } from '../interfaces/vulnerability';
import { BaseVulnerability } from './BaseVulnerability';

export class XSS extends BaseVulnerability {
    constructor(configPath: string) {
        super(configPath, 'xss');
    }

    detect(code: string, filePath: string): VulnerabilityReport[] {
        const reports: VulnerabilityReport[] = [];
        const unsafePattern = this.patterns.get('unsafeWritePattern');
        const safePattern = this.patterns.get('safeMethodPattern');

        if (!unsafePattern || !safePattern) {
            throw new Error('XSS patterns not found in configuration.');
        }

        // Find safe method indices in the code
        const safeIndices = this.getPatternIndices(code, safePattern);

        // Detect unsafe patterns that are not near safe methods
        this.detectUnsafePatterns(code, unsafePattern, safeIndices, filePath, reports);

        return reports;
    }

    // Find indices of safe methods in the code
    private getPatternIndices(code: string, pattern: RegExp): number[] {
        const indices: number[] = [];
        let match;
        // The while loop will run as long as there are matches for safe patterns in the code
        // It will break when no more matches are found
        while ((match = pattern.exec(code)) !== null) {
            indices.push(match.index);
        }
        return indices;
    }

    // Detect unsafe patterns and check their proximity to safe methods
    private detectUnsafePatterns(code: string, unsafePattern: RegExp, safeIndices: number[], filePath: string, reports: VulnerabilityReport[]): void {
        const unsafeRegex = new RegExp(unsafePattern, 'g');
        let match: RegExpExecArray | null;

        // The while loop will run as long as there are matches for unsafe patterns in the code
        // It will break when no more matches are found
        while ((match = unsafeRegex.exec(code)) !== null) {
            // Check if the unsafe method is near a safe method
            const isSafe = safeIndices.some(safeIndex => Math.abs(safeIndex - match!.index) < 100); // Assuming a safe distance of 100 characters

            if (!isSafe) {
                const startLine = this.getLineNumber(code, match.index);
                const message = this.messages.get("xss") || 'Possible XSS vulnerability detected';
                reports.push(this.createReport(filePath, startLine, 'xss', message, VulnerabilityType.XSS));
            }
        }
    }
}
