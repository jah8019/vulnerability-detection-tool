import { VulnerabilityReport } from '../contracts/vulnerabilityReport';
import { VulnerabilityType } from '../interfaces/vulnerability';
import { BaseVulnerability } from './BaseVulnerability';

export class SQLInjection extends BaseVulnerability {
    constructor(configPath: string) {
        super(configPath, 'sqlInjection');
    }

    detect(code: string, filePath: string): VulnerabilityReport[] {
        const reports: VulnerabilityReport[] = [];
        const sqlPattern = this.patterns.get('sqlPattern');

        if (!sqlPattern) {
            throw new Error('SQL pattern not found in configuration.');
        }

        const regex = new RegExp(sqlPattern, 'g');
        let match;
        while ((match = regex.exec(code)) !== null) {
            const startLine = this.getLineNumber(code, match.index);
            const message = this.messages.get('sqlInjection') || 'Possible SQL Injection vulnerability detected';
            reports.push(this.createReport(filePath, startLine, 'sqlInjection', message, VulnerabilityType.SQLInjection));
        }

        return reports;
    }
}

// import { VulnerabilityReport } from '../contracts/vulnerabilityReport';
// import { VulnerabilityType } from '../interfaces/vulnerability';
// import { BaseVulnerability } from './BaseVulnerability';

// export class SQLInjection extends BaseVulnerability {
//     constructor(configPath: string) {
//         super(configPath, 'sqlInjection');
//     }

//     detect(code: string, filePath: string): VulnerabilityReport[] {
//         const reports: VulnerabilityReport[] = [];
//         const sqlPattern = this.patterns.get('sqlPattern');

//         if (!sqlPattern) {
//             throw new Error('SQL pattern not found in configuration.');
//         }

//         let match;
//         while ((match = sqlPattern.exec(code)) !== null) {
//             const startLine = this.getLineNumber(code, match.index);
//             const message = this.messages.get('sqlInjection') || 'Possible SQL Injection vulnerability detected';
//             reports.push(this.createReport(filePath, startLine, 'sqlInjection', message, VulnerabilityType.SQLInjection));
//         }

//         return reports;
//     }
// }
