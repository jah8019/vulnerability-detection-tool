import * as vscode from 'vscode';
import * as path from 'path';
import { VulnerabilityScanner } from './vulnerabilityScanner';

export function activate(context: vscode.ExtensionContext) {
  const configPath = context.asAbsolutePath(path.join('dist', 'extension', 'config', 'vulnerabilityConfig.json'));
  const scanner = new VulnerabilityScanner(configPath);
  const collection = vscode.languages.createDiagnosticCollection('vulnerabilities');

  context.subscriptions.push(
    vscode.commands.registerCommand('extension.checkVulnerabilities', async () => {
      await scanWorkspace(scanner, collection);
    })
  );

  context.subscriptions.push(
    vscode.workspace.onDidSaveTextDocument(async (document) => {
      await scanDocument(document, scanner, collection);
    })
  );

  context.subscriptions.push(
    vscode.workspace.onDidOpenTextDocument(async (document) => {
      await scanDocument(document, scanner, collection);
    })
  );

  context.subscriptions.push(collection);

  scanOpenDocuments(scanner, collection);

  scanWorkspace(scanner, collection);
}

async function scanWorkspace(scanner: VulnerabilityScanner, collection: vscode.DiagnosticCollection) {
  const workspaceFolders = vscode.workspace.workspaceFolders;
  if (!workspaceFolders) {
    vscode.window.showInformationMessage('No workspace folder found.');
    return;
  }

  collection.clear();

  for (const folder of workspaceFolders) {
    const files = await vscode.workspace.findFiles(new vscode.RelativePattern(folder, '**/*.{cs,js,ts}'));

    for (const file of files) {
      const document = await vscode.workspace.openTextDocument(file);
      await scanDocument(document, scanner, collection);
    }
  }

  vscode.window.showInformationMessage('Vulnerability scan complete.');
}

async function scanDocument(document: vscode.TextDocument, scanner: VulnerabilityScanner, collection: vscode.DiagnosticCollection) {
  if (document.languageId !== 'csharp') {
    return;
  }

  const code = document.getText();
  const filePath = document.uri.fsPath;
  const reports = scanner.scan(code, filePath);

  const diagnostics: vscode.Diagnostic[] = reports.map(report => {
    const range = new vscode.Range(report.lineNumber - 1, 0, report.lineNumber - 1, 100);
    const diagnostic = new vscode.Diagnostic(range, report.description, vscode.DiagnosticSeverity.Warning);
    diagnostic.source = 'VulnerabilityScanner';
    diagnostic.code = report.details;
    return diagnostic;
  });

  collection.set(document.uri, diagnostics);
}

async function scanOpenDocuments(scanner: VulnerabilityScanner, collection: vscode.DiagnosticCollection) {
  const openDocuments = vscode.workspace.textDocuments;

  for (const document of openDocuments) {
      await scanDocument(document, scanner, collection);
  }
}


export function deactivate() { }
