import { exec } from 'child_process';
import * as path from 'path';
import { FileHelper } from './fileHelper';

function runCLI(targetPath: string): Promise<string> {
    return new Promise((resolve, reject) => {
        exec(`npm run build:cli && npm run vuln-scan ${targetPath}`, (error, stdout, stderr) => {
            if (error) {
                reject(`Error executing CLI: ${error.message}`);
                return;
            }
            resolve(stdout);
        });
    });
}

describe('Vulnerability Scanner CLI', () => {
    beforeAll(() => {
        FileHelper.createTestFiles();
    });

    afterAll(() => {
        FileHelper.cleanupTestFiles();
    });

    const testFiles = [
        {
            name: 'SQLInjection.cs',
            expectedCount: 4 // Expecting 4 SQL injection vulnerabilities
        },
        {
            name: 'BufferOverflow.cs',
            expectedCount: 3 // Expecting 3 buffer overflow vulnerabilities
        },
        {
            name: 'XSS.cs',
            expectedCount: 4 // Expecting 4 XSS vulnerabilities
        }
    ];

    testFiles.forEach(file => {
        it(`should detect ${file.expectedCount} vulnerabilities in ${file.name}`, async () => {
            const filePath = path.join(FileHelper.testDirectory, file.name);
            const output = await runCLI(filePath);
            expect(output).toContain(`Found ${file.expectedCount} vulnerabilities:`)
        });
    });

    it('should detect vulnerabilities in the directory', async () => {
        const output = await runCLI(FileHelper.testDirectory);
        const totalExpectedCount = testFiles.reduce((sum, file) => sum + file.expectedCount, 0);
        expect(output).toContain(`Found ${totalExpectedCount} vulnerabilities:`)
    });
});
